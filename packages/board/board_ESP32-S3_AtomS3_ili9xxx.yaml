# Updated : 2025.06.12
# Version : 1.3.0
# GitHub  : https://github.com/Sleeper85/esphome-yambms

# YamBMS ( Yet another multi-BMS Merging Solution )

# This YAML is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>.

substitutions:
  board_chip: "ESP32-S3"
  board_name: "Atom S3"
  # Interfaces GPIOs
  # uart_esp_1 (Grove port)
  tx_pin_1: '2'
  rx_pin_1: '1'
  # uart_esp_2
  tx_pin_2: '7'
  rx_pin_2: '8'
  # uart_esp_3
  tx_pin_3: '38'
  rx_pin_3: '39'
  # canbus_esp32_can (Atomic CAN base)
  tx_pin_4: '5'
  rx_pin_4: '6'
  # canbus_mcp2515
  spi_mosi_pin: '7'
  spi_miso_pin: '8'
  spi_clk_pin: '38'
  mcp2515_cs_pin: '39'
  # web_server_sorting_group: '666'

packages:
  device_base: !include ../base/device_base.yaml
  device_base_wifi: !include ../base/device_base_wifi.yaml
  display: !include board_options_display_128x128.yaml

esp32:
  board: m5stack-atoms3
  variant: esp32s3
  cpu_frequency: 240MHz
  framework:
    type: esp-idf

esphome:
  platformio_options:
    board_build.flash_mode: dio # use Dual IO (dio) instead of Quad IO (qio) to prevent boot loop after flashing

wifi:
  id: my_network
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret domain

logger:
  baud_rate: 0 # frees the 3rd UART and avoids some bugs like "WK2168 with canbus" or "BLE client with RS485 modbus"
  hardware_uart: USB_SERIAL_JTAG

# +--------------------------------------+
# | Inverter Heartbeat Light             |
# +--------------------------------------+

light:
  # ESP Light used to see the inverter heartbeat
  # Internal : only specifying an id without a name will implicitly set this to true.
  - platform: binary
    id: esp_light
    output: esp_output

# +--------------------------------------+
# | Atom S3 related configuration        |
# +--------------------------------------+
  # LCD     0.85"
  # GPIO15  CS
  # GPIO16  BL
  # GPIO17  SCK
  # GPIO21  MOSI
  # GPIO33  RS
  # GPIO34  LCD-RST
  # GPIO4   IR
  # GPIO41  BUTTON

spi:
  - id: atom_spi_bus
    clk_pin:  GPIO17
    mosi_pin: GPIO21

fan:
  # Backlight Control Platform
  - platform: speed
    id: backlight
    output: backlight_out
    name: "${name} ${board_name} Backlight control"
    # web_server:
      # sorting_weight:  ${web_server_sorting_group}00
      # sorting_group_id: group_${web_server_sorting_group}
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:brightness-6

output:
  # Backlight Output Hardware
  - platform: ledc
    id: backlight_out
    pin:
      number: GPIO16
      # allow_other_uses: true
    # inverted: true
    frequency: 120Hz
    channel: 1
    max_power: 1.00
    min_power: 0.10
    zero_means_zero: true
  # Inverter Heartbeat Output (ESP32 board without LED)
  - platform: template
    id: esp_output
    type: binary
    write_action:
      - logger.log: "Inverter Heartbeat Output"
      #- lambda: C++ code; # action to be performed at each inverter heartbeat

binary_sensor:
  # Atom S3 Button
  - platform: gpio
    id: atom_button
    pin:
      number: GPIO41
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - lambda: ESP_LOGI("Atom S3 Button", "Pressed");
        - lambda: |-
            // On press -> make sure set==ON & bri==100%
            if ((id(backlight).speed != 100) || (id(backlight).state != true))
            {
              auto call = id(backlight).turn_on();
              call.set_speed(100);
              call.perform();
            }
            // if autodim enabled, execute script
            if (id(backlight_autodim_time).state > 0)
            {
              id(backlight_autodim).execute();
            }
        - display.page.show_next: my_display
        #- display.page.show_previous: my_display

display:
  # Atom S3 display see https://esphome.io/components/display/ili9xxx.html
  - platform: ili9xxx
    id:         my_display
    spi_id:     atom_spi_bus
    model:      M5STACK  # M5STACK / ST7789V
    cs_pin:     GPIO15
    dc_pin:     GPIO33
    reset_pin:  GPIO34
    dimensions:
      height:   128
      width:    128
      offset_height:  1
      offset_width:   2
    invert_colors: true
    # rotation: 180   # use transform instead! https://esphome.io/components/display/ili9xxx.html

number:
  # Backlight max Level
  - platform: template
    id: backlight_max_power
    name: "${name} ${board_name} Backlight max Level"
    # web_server:
      # sorting_weight:  ${web_server_sorting_group}05
      # sorting_group_id: group_${web_server_sorting_group}
    icon: mdi:brightness-7
    optimistic: true
    min_value: 0
    max_value: 100
    step: 1
    initial_value:  75
    restore_value: true
    mode: box
    unit_of_measurement: "%"
    on_value:
      then:
        - lambda: |-
            int speed = id(backlight).speed;                // get actual level
            id(backlight_out).set_max_power(x / 100);       // set max_power
            auto call = id(backlight).turn_on();            // reset level
            call.set_speed(speed);
            call.perform();
    update_interval: 10s

  # Backlight Auto-Dim time
  - platform: template
    id: backlight_autodim_time
    name: "${name} ${board_name} Backlight Auto-Dim Time in min."
    # web_server:
      # sorting_weight:  ${web_server_sorting_group}20
      # sorting_group_id: group_${web_server_sorting_group}
    icon: mdi:brightness-auto
    optimistic: true
    min_value:  0
    max_value: 10
    step: 0.1
    initial_value: 0.2
    restore_value: true
    mode: box
    unit_of_measurement: "min"
    update_interval: never #5s

  # Backlight Auto-Dim Level
  - platform: template
    id: backlight_autodim_level
    name: "${name} ${board_name} Backlight Auto-Dim Level"
    # web_server:
      # sorting_weight:  ${web_server_sorting_group}15
      # sorting_group_id: group_${web_server_sorting_group}
    icon: mdi:brightness-4
    optimistic: true
    min_value:   0
    max_value: 100
    step:        1
    initial_value: 25
    restore_value: true
    mode: box
    unit_of_measurement: "%"
    update_interval: never #5s

script:
  # Backlight Auto-Dimming Script
  - id: backlight_autodim
    mode: restart
    then:
      - delay: !lambda return id(backlight_autodim_time).state * 60 * 1000;     // delay (x min * 60s * 1000ms)
      - lambda: |-                                                              # Handle Dimlevel
          int speed = id(backlight_autodim_level).state;                        // get desired dimlevel
          if (speed == 0)                                                       // if dimmlevel = 0
          {
            auto call = id(backlight).turn_off();                               // turn off backlight
            call.perform();
          }
          else
          {
            auto call = id(backlight).turn_on();                                // set dimlevel
            call.set_speed(speed);
            call.perform();
          }

# web_server v3 needs to be added and sorting_groups must be defined to use grouping
# web_server:
  # version: 3
  # sorting_groups:
  #   - id: group_666
  #     name: "${board_name} Backlight Control"
  #     sorting_weight: -10000
