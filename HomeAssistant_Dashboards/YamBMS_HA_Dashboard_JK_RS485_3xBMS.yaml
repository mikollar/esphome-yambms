# Updated : 2025.08.14
# Version : 1.5.8
# GitHub  : https://github.com/Sleeper85/esphome-yambms

# YamBMS ( Yet another multi-BMS Merging Solution )

# This YAML is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>.

views:
  - title: YamBMS
    type: sections
    max_columns: 3
    sections:
      - type: grid
        cards:
          - type: heading
            heading: YamBMS - Battery
          - graph: line
            type: sensor
            entity: sensor.yambms_yambms_1_total_voltage
            detail: 2
            layout_options:
              grid_columns: 2
              grid_rows: 2
            name: Voltage
            hours_to_show: 8
          - graph: line
            type: sensor
            entity: sensor.yambms_yambms_1_battery_soc
            detail: 2
            name: SoC
            hours_to_show: 8
          - type: gauge
            entity: sensor.yambms_yambms_1_current
            needle: true
            severity:
              green: 0
              yellow: -250
              red: -500
            max: 500
            min: -500
            name: Current
            layout_options:
              grid_columns: 2
              grid_rows: 3
          - type: gauge
            entity: sensor.yambms_yambms_1_power
            needle: true
            severity:
              green: 0
              yellow: -2500
              red: -5000
            max: 5000
            min: -5000
            name: Power
            layout_options:
              grid_columns: 2
              grid_rows: 3
          - type: tile
            entity: sensor.yambms_yambms_1_installed_battery_capacity
            name: Installed Battery Capacity
          - type: tile
            entity: sensor.yambms_yambms_1_battery_soh
            name: Battery SoH
          - type: tile
            entity: sensor.yambms_yambms_1_battery_capacity
            name: Battery Capacity
          - type: tile
            entity: sensor.yambms_yambms_1_capacity_remaining
            name: Capacity Remaining
          - type: tile
            entity: sensor.yambms_yambms_1_delta_cell_voltage
            name: Delta Cell Voltage
          - type: tile
            entity: binary_sensor.yambms_yambms_1_bms_equalizing_state
            name: Equalizing state
          - type: entities
            entities:
              - entity: sensor.yambms_yambms_1_max_cell_voltage
                name: Max Cell V.
              - entity: sensor.yambms_yambms_1_max_voltage_cell
                name: Cell number
            layout_options:
              grid_columns: 2
              grid_rows: 2
          - type: entities
            entities:
              - entity: sensor.yambms_yambms_1_min_cell_voltage
                name: Min Cell V.
              - entity: sensor.yambms_yambms_1_min_voltage_cell
                name: Cell number
            layout_options:
              grid_columns: 2
              grid_rows: 2
          - type: entities
            entities:
              - entity: sensor.yambms_yambms_1_max_temperature
                name: Max temp.
              - entity: sensor.yambms_yambms_1_max_temperature_sensor
                name: Sensor number
            layout_options:
              grid_columns: 2
              grid_rows: 2
          - type: entities
            entities:
              - entity: sensor.yambms_yambms_1_min_temperature
                name: Min temp.
              - entity: sensor.yambms_yambms_1_min_temperature_sensor
                name: Sensor number
            layout_options:
              grid_columns: 2
              grid_rows: 2
        column_span: 1
      - type: grid
        cards:
          - type: heading
            heading: YamBMS - Status
          - type: tile
            entity: binary_sensor.yambms_inverter_communication_status
            name: Inverter comm. status
          - type: tile
            entity: binary_sensor.yambms_esp32_online_status
            name: ESP32 status
          - type: tile
            entity: sensor.yambms_yambms_1_charging_status
            name: Charging Status
          - type: tile
            entity: sensor.yambms_yambms_1_last_complete_charge
            name: Last Complete Charge
          - type: tile
            entity: sensor.yambms_yambms_1_charging_instruction
            name: Charging Instruction
          - type: tile
            entity: binary_sensor.yambms_yambms_1_discharging_instruction
            name: Discharging Instruction
          - type: tile
            entity: sensor.yambms_yambms_1_alarm
            name: Alarm
          - type: tile
            entity: sensor.yambms_yambms_1_warning
            name: Warning
          - type: entities
            entities:
              - entity: sensor.yambms_yambms_1_bms_count
                name: BMS count
              - entity: sensor.yambms_yambms_1_bms_combined
                name: BMS combined
              - entity: sensor.yambms_yambms_1_bms_blocking_charge
                name: BMS blocking charge
              - entity: sensor.yambms_yambms_1_bms_blocking_discharge
                name: BMS blocking discharge
              - entity: sensor.yambms_yambms_1_bms_in_alarm
                name: BMS in alarm
            layout_options:
              grid_columns: 2
              grid_rows: 4
          - type: entities
            entities:
              - entity: sensor.yambms_yambms_1_shunt_count
                name: Shunt count
              - entity: sensor.yambms_yambms_1_shunt_combined
                name: Shunt combined
            layout_options:
              grid_columns: 2
              grid_rows: 2
          - type: tile
            entity: sensor.yambms_esp32_uptime
            name: ESP32 Uptime
          - type: tile
            entity: sensor.yambms_esp32_esphome_version
            name: ESPHome version
          - type: entities
            entities:
              - entity: sensor.yambms_yambms_1_requested_charge_voltage
                name: Requested Charge Voltage
              - entity: sensor.yambms_yambms_1_requested_charge_current
                name: Requested Charge Current
              - entity: sensor.yambms_yambms_1_requested_discharge_voltage
                name: Requested Discharge Voltage
              - entity: sensor.yambms_yambms_1_requested_discharge_current
                name: Requested Discharge Current
              - entity: binary_sensor.yambms_yambms_1_requested_force_charge
                name: Requested Force Charge
          - type: tile
            entity: sensor.yambms_yambms_1_running_version
            name: Running version
          - type: tile
            entity: sensor.yambms_yambms_1_last_version
            name: Last version
        column_span: 1
  - title: Control
    cards:
      - type: entity-filter
        entities:
          - entity: select.yambms_canbus_1_bms_name
            name: CANBUS 1 BMS Name
          - entity: select.yambms_canbus_1_protocol
            name: CANBUS 1 Protocol
          - entity: select.yambms_rs485_1_protocol
            name: RS485 1 Protocol
        conditions:
          - condition: state
            state_not: unavailable
        card:
          title: YamBMS - Inverter Comm. Protocol
      - type: entities
        entities:
          - entity: switch.yambms_yambms_1_charge_enabled
            name: YamBMS 1 Charge enabled
          - entity: switch.yambms_yambms_1_discharge_enabled
            name: YamBMS 1 Discharge enabled
          - entity: binary_sensor.yambms_yambms_1_bms_charging_allowed
            name: YamBMS 1 BMS Charging allowed
          - entity: binary_sensor.yambms_yambms_1_bms_discharging_allowed
            name: YamBMS 1 BMS Discharging allowed
        title: YamBMS - Charge / Discharge switch
      - type: entities
        entities:
          - entity: switch.yambms_yambms_1_automatic_charge_voltage
            name: Automatic Charge Voltage
          - entity: number.yambms_yambms_1_auto_cvl_boost_charge_v
            name: Auto CVL Boost Charge V.
        title: YamBMS - Auto CVL
      - type: entities
        entities:
          - entity: sensor.yambms_yambms_1_charging_status
            name: Charging Status
          - entity: sensor.yambms_yambms_1_charging_instruction
            name: Charging Instruction
          - entity: switch.yambms_yambms_1_float_charge_enabled
            name: Float charge enabled
          - entity: switch.yambms_yambms_1_eoc_timer_enabled
            name: EOC timer enabled
          - entity: number.yambms_yambms_1_bulk_voltage
            name: Bulk voltage
          - entity: number.yambms_yambms_1_float_voltage
            name: Float voltage
          - entity: number.yambms_yambms_1_inverter_offset_v
            name: Inverter Offset V.
        title: YamBMS - Charging Settings
      - type: entities
        entities:
          - entity: switch.yambms_yambms_1_automatic_charge_current
            name: Automatic Charge Current
          - entity: switch.yambms_yambms_1_automatic_discharge_current
            name: Automatic Discharge Current
        title: YamBMS - Auto CCL / DCL
      - type: entities
        entities:
          - entity: select.yambms_yambms_1_automatic_float_voltage
            name: Automatic Float Voltage
          - entity: sensor.yambms_yambms_1_auto_float_voltage
            name: Auto Float Voltage
          - entity: number.yambms_yambms_1_auto_float_update_interval
            name: Update Interval
          - entity: number.yambms_yambms_1_auto_float_voltage_step
            name: Voltage Step
        title: YamBMS - Auto Float
      - type: entities
        entities:
          - entity: number.yambms_yambms_1_rebulk_soc
            name: Rebulk SoC
          - entity: number.yambms_yambms_1_rebulk_v
            name: Rebulk V.
          - entity: switch.yambms_yambms_1_force_bulk_top_bal
            name: Force Bulk (top bal)
        title: YamBMS - ReBulk
      - type: entities
        entities:
          - entity: number.yambms_yambms_1_max_charge_current_percent
            name: Max charge current (%)
          - entity: number.yambms_yambms_1_max_discharge_current_percent
            name: Max discharge current (%)
        title: YamBMS - Max current (%)
      - type: entities
        entities:
          - entity: switch.yambms_yambms_1_request_force_charge
            name: Request force charge
          - entity: number.yambms_yambms_1_request_force_charge_start_soc
            name: Force charge Start SoC
          - entity: number.yambms_yambms_1_request_force_charge_stop_soc
            name: Force charge Stop SoC
          - entity: binary_sensor.yambms_yambms_1_requested_force_charge
            name: Requested Force Charge
        title: YamBMS - Request force charge
      - type: entities
        entities:
          - entity: sensor.yambms_yambms_1_requested_charge_voltage
            name: Requested Charge Voltage
          - entity: sensor.yambms_yambms_1_requested_discharge_voltage
            name: Requested Discharge Voltage
          - entity: sensor.yambms_yambms_1_requested_charge_current
            name: Requested Charge Current
          - entity: sensor.yambms_yambms_1_requested_discharge_current
            name: Requested Discharge Current
        title: YamBMS - Requested Values
      - type: entities
        entities:
          - entity: sensor.yambms_yambms_1_last_complete_charge
            name: Last Complete Charge
          - entity: binary_sensor.yambms_esp32_online_status
            name: ESP32 Online Status
          - entity: sensor.yambms_esp32_uptime
            name: ESP32 Uptime
          - entity: sensor.yambms_esp32_esphome_version
            name: ESP32 ESPHome version
          - entity: button.yambms_esp32_restart
            name: ESP32 Restart
        title: YamBMS - Diagnostic
      - type: entity-filter
        entities:
          - entity: binary_sensor.yambms_canbus_1_status
            name: CANBUS 1 Status
          - entity: switch.yambms_canbus_1_inverter_heartbeat_monitoring
            name: CANBUS 1 Inverter Heartbeat Monitoring
          - entity: sensor.yambms_canbus_1_inverter_heartbeat
            name: CANBUS 1 Inverter Heartbeat
          - entity: binary_sensor.yambms_rs485_1_status
            name: RS485 1 Status
          - entity: switch.yambms_rs485_1_inverter_heartbeat_monitoring
            name: RS485 1 Inverter Heartbeat Monitoring
          - entity: sensor.yambms_rs485_1_inverter_heartbeat
            name: RS485 1 Inverter Heartbeat
        conditions:
          - condition: state
            state_not: unavailable
        card:
          title: YamBMS - Inverter Status & Heartbeat
      - type: entity-filter
        entities:
          - entity: sensor.yambms_debug_free_psram_percent
            name: Debug Free PSRAM (%)
          - entity: sensor.yambms_debug_free_psram
            name: Debug Free PSRAM
          - entity: sensor.yambms_debug_heap_free_percent
            name: Debug Heap free (%)
          - entity: sensor.yambms_debug_heap_free
            name: Debug Heap free
          - entity: sensor.yambms_debug_heap_max_block_percent
            name: Debug Heap max block (%)
          - entity: sensor.yambms_debug_heap_max_block
            name: Debug Heap max block
          - entity: sensor.yambms_debug_loop_time
            name: Debug Loop time
          - entity: sensor.yambms_esp32_uptime
            name: ESP32 Uptime
          - entity: sensor.yambms_esp32_esphome_version
            name: ESPHome version
          - entity: sensor.yambms_debug_reset_reason
            name: Debug Reset reason
        conditions:
          - condition: state
            state_not: unavailable
        card:
          title: YamBMS - DEBUG
  - title: BMS
    type: sections
    max_columns: 3
    sections:
      - type: grid
        column_span: 1
        cards:
          - type: heading
            heading: BMS 1
            heading_style: title
            badges:
              - type: entity
                show_state: true
                show_icon: true
                entity: binary_sensor.yambms_jk_bms_1_status_online
                color: state
                name: Online
                state_content: name
              - type: entity
                show_state: true
                show_icon: true
                entity: binary_sensor.yambms_jk_bms_1_can_be_combined
                color: state
                name: Combined
                state_content: name
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  <center>Time : <b><font color=red>{{
                  states('sensor.yambms_jk_bms_1_total_runtime_formatted', rounded=True)
                  | upper }}</font>
            layout_options:
              grid_columns: 2
              grid_rows: 1
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  <center>Error : <b><font color=red>{{
                  states('sensor.yambms_jk_bms_1_errors', rounded=True)}}</font>
            layout_options:
              grid_columns: 2
              grid_rows: 1
          - type: grid
            square: false
            columns: 3
            cards:
              - type: markdown
                content: >-
                  <center>Charge : <b>{% if
                  states('binary_sensor.yambms_jk_bms_1_status_charging', rounded=True) == 'on'
                  %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_1_status_charging', rounded=True) | upper
                  }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_1_status_charging', rounded=True) | upper
                  }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center>Discharge : <b> {% if
                  states('binary_sensor.yambms_jk_bms_1_status_discharging', rounded=True) ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_1_status_discharging', rounded=True) |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_1_status_discharging', rounded=True) |
                  upper }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center>Balance : <b> {% if
                  states('binary_sensor.yambms_jk_bms_1_status_balancing', rounded=True) ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_1_status_balancing', rounded=True) |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_1_status_balancing', rounded=True) |
                  upper }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_1_battery_voltage', rounded=True) }}
                  V</font></b>
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_1_battery_current', rounded=True) }} A</font></b>
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_1_battery_power', rounded=True) }} W</font>
          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                content: >-
                  <center><b><font size=4>SoC :&nbsp;&nbsp;<font
                  color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_1_battery_soc', rounded=True) }}
                  %</font></font>
              - type: markdown
                content: >-
                  <center><b><font size=4>SoH :&nbsp;&nbsp;<font
                  color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_1_battery_soh_valuation', rounded=True) }}
                  %</font></font>
              - type: markdown
                content: >-
                  <center> Battery Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('number.yambms_jk_bms_1_battery_capacity_total_setting', rounded=True)
                  }} Ah</font><br> Cycle Capacity :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_total_charging_cycle_capacity', rounded=True)
                  }} Ah</font><br> Ave. Cell Vol. :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_cell_average_voltage', rounded=True) }}
                  V</font><br> Balance Cur. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_balancing_current', rounded=True) }}
                  A</font><br> Max temp. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_max_temperature', rounded=True) }}
                  °C</font>
              - type: markdown
                content: >-
                  <center> Remain Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_battery_capacity_remaining', rounded=True) }}
                  Ah</font><br> Cycle Count :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_charging_cycles', rounded=True)
                  }}</font><br> Delta Cell Vol. :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_cell_delta_voltage', rounded=True) }}
                  V</font><br> MOS temp. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_temperature_powertube', rounded=True)
                  }} °C</font><br> Min temp. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_min_temperature', rounded=True) }}
                  °C</font>
          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                content: >-
                  
                  {% macro cell_v(num, entity, max_color = 'red' , min_color = '#3090C9', lead_zero = 0, spaces=3) -%}
                  {% if lead_zero %}0{% endif %}{{num}}.{% for spaces in range(0, spaces) -%} {{ '&nbsp;' }} {%- endfor %}
                  {% if states('sensor{}_cell_voltage_max_cell_number'.format(entity), rounded=True) == '{}'.format(num) %}
                  <font color='{{ max_color }}'>
                  {% elif states('sensor{}_cell_voltage_min_cell_number'.format(entity), rounded=True) == '{}'.format(num) %}
                  <font color='{{ min_color }}'>
                  {% else %} <font> {% endif %}
                  
                  {{ states('sensor{}_cell_voltage_{}{}'.format(entity, ''.zfill(lead_zero), num), rounded=True) }} V</font>
                  {% if has_value('sensor{}_cell_resistance_{}{}'.format(entity, ''.zfill(lead_zero), num)) %} / 
                  {{ states('sensor{}_cell_resistance_{}{}'.format(entity, ''.zfill(lead_zero), num) , rounded=True) }} Ω {% endif %}
                  <br>
                  
                  {% endmacro %}
                  
                  <center>
                  
                  {{ cell_v(lead_zero=1, num=1, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=1, num=2, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=1, num=3, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=1, num=4, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=1, num=5, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=1, num=6, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=1, num=7, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=1, num=8, entity='.yambms_jk_bms_1') }}                  
                  
                  </center>
              - type: markdown
                content: >-
                  
                  {% macro cell_v(num, entity, max_color = 'red' , min_color = '#3090C9', lead_zero = 0, spaces=3) -%}
                  {% if lead_zero %}0{% endif %}{{num}}.{% for spaces in range(0, spaces) -%} {{ '&nbsp;' }} {%- endfor %}
                  {% if states('sensor{}_cell_voltage_max_cell_number'.format(entity), rounded=True) == '{}'.format(num) %}
                  <font color='{{ max_color }}'>
                  {% elif states('sensor{}_cell_voltage_min_cell_number'.format(entity), rounded=True) == '{}'.format(num) %}
                  <font color='{{ min_color }}'>
                  {% else %} <font> {% endif %}
                  
                  {{ states('sensor{}_cell_voltage_{}{}'.format(entity, ''.zfill(lead_zero), num), rounded=True) }} V</font>
                  {% if has_value('sensor{}_cell_resistance_{}{}'.format(entity, ''.zfill(lead_zero), num)) %} / 
                  {{ states('sensor{}_cell_resistance_{}{}'.format(entity, ''.zfill(lead_zero), num) , rounded=True) }} Ω {% endif %}
                  <br>
                  
                  {% endmacro %}
                  
                  <center>
                  
                  {{ cell_v(lead_zero=1, num=9, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=0, num=10, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=0, num=11, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=0, num=12, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=0, num=13, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=0, num=14, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=0, num=15, entity='.yambms_jk_bms_1') }}
                  {{ cell_v(lead_zero=0, num=16, entity='.yambms_jk_bms_1') }}              
                  
                  </center>
          - type: entity-filter
            entities:
              - entity: switch.yambms_jk_bms_1_charge_switch
                name: Charge switch
              - entity: switch.yambms_jk_bms_1_discharge_switch
                name: Discharge switch
              - entity: switch.yambms_jk_bms_1_balance_switch
                name: Balance switch
              - entity: switch.yambms_jk_bms_1_enable_bluetooth_connection
                name: Bluetooth
              - entity: number.yambms_jk_bms_1_charging_cycles_offset
                name: Charging Cycles Offset
            conditions:
              - condition: state
                state_not: unavailable
      - type: grid
        column_span: 1
        cards:
          - type: heading
            heading: BMS 2
            heading_style: title
            badges:
              - type: entity
                show_state: true
                show_icon: true
                entity: binary_sensor.yambms_jk_bms_2_status_online
                color: state
                name: Online
                state_content: name
              - type: entity
                show_state: true
                show_icon: true
                entity: binary_sensor.yambms_jk_bms_2_can_be_combined
                color: state
                name: Combined
                state_content: name
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  <center>Time : <b><font color=red>{{
                  states('sensor.yambms_jk_bms_2_total_runtime_formatted', rounded=True)
                  | upper }}</font>
            layout_options:
              grid_columns: 2
              grid_rows: 1
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  <center>Error : <b><font color=red>{{
                  states('sensor.yambms_jk_bms_2_errors', rounded=True)}}</font>
            layout_options:
              grid_columns: 2
              grid_rows: 1
          - type: grid
            square: false
            columns: 3
            cards:
              - type: markdown
                content: >-
                  <center>Charge : <b>{% if
                  states('binary_sensor.yambms_jk_bms_2_status_charging', rounded=True) == 'on'
                  %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_2_status_charging', rounded=True) | upper
                  }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_2_status_charging', rounded=True) | upper
                  }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center>Discharge : <b> {% if
                  states('binary_sensor.yambms_jk_bms_2_status_discharging', rounded=True) ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_2_status_discharging', rounded=True) |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_2_status_discharging', rounded=True) |
                  upper }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center>Balance : <b> {% if
                  states('binary_sensor.yambms_jk_bms_2_status_balancing', rounded=True) ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_2_status_balancing', rounded=True) |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_2_status_balancing', rounded=True) |
                  upper }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_2_battery_voltage', rounded=True) }}
                  V</font></b>
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_2_battery_current', rounded=True) }} A</font></b>
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_2_battery_power', rounded=True) }} W</font>
          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                content: >-
                  <center><b><font size=4>SoC :&nbsp;&nbsp;<font
                  color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_2_battery_soc', rounded=True) }}
                  %</font></font>
              - type: markdown
                content: >-
                  <center><b><font size=4>SoH :&nbsp;&nbsp;<font
                  color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_2_battery_soh_valuation', rounded=True) }}
                  %</font></font>
              - type: markdown
                content: >-
                  <center> Battery Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('number.yambms_jk_bms_2_battery_capacity_total_setting', rounded=True)
                  }} Ah</font><br> Cycle Capacity :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_total_charging_cycle_capacity', rounded=True)
                  }} Ah</font><br> Ave. Cell Vol. :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_cell_average_voltage', rounded=True) }}
                  V</font><br> Balance Cur. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_balancing_current', rounded=True) }}
                  A</font><br> Max temp. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_max_temperature', rounded=True) }}
                  °C</font>
              - type: markdown
                content: >-
                  <center> Remain Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_battery_capacity_remaining', rounded=True) }}
                  Ah</font><br> Cycle Count :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_charging_cycles', rounded=True)
                  }}</font><br> Delta Cell Vol. :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_cell_delta_voltage', rounded=True) }}
                  V</font><br> MOS temp. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_temperature_powertube', rounded=True)
                  }} °C</font><br> Min temp. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_min_temperature', rounded=True) }}
                  °C</font>
          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                content: >-
                  
                  {% macro cell_v(num, entity, max_color = 'red' , min_color = '#3090C9', lead_zero = 0, spaces=3) -%}
                  {% if lead_zero %}0{% endif %}{{num}}.{% for spaces in range(0, spaces) -%} {{ '&nbsp;' }} {%- endfor %}
                  {% if states('sensor{}_cell_voltage_max_cell_number'.format(entity), rounded=True) == '{}'.format(num) %}
                  <font color='{{ max_color }}'>
                  {% elif states('sensor{}_cell_voltage_min_cell_number'.format(entity), rounded=True) == '{}'.format(num) %}
                  <font color='{{ min_color }}'>
                  {% else %} <font> {% endif %}
                  
                  {{ states('sensor{}_cell_voltage_{}{}'.format(entity, ''.zfill(lead_zero), num), rounded=True) }} V</font>
                  {% if has_value('sensor{}_cell_resistance_{}{}'.format(entity, ''.zfill(lead_zero), num)) %} / 
                  {{ states('sensor{}_cell_resistance_{}{}'.format(entity, ''.zfill(lead_zero), num) , rounded=True) }} Ω {% endif %}
                  <br>
                  
                  {% endmacro %}
                  
                  <center>
                  
                  {{ cell_v(lead_zero=1, num=1, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=1, num=2, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=1, num=3, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=1, num=4, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=1, num=5, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=1, num=6, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=1, num=7, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=1, num=8, entity='.yambms_jk_bms_2') }}                  
                  
                  </center>
              - type: markdown
                content: >-
                  
                  {% macro cell_v(num, entity, max_color = 'red' , min_color = '#3090C9', lead_zero = 0, spaces=3) -%}
                  {% if lead_zero %}0{% endif %}{{num}}.{% for spaces in range(0, spaces) -%} {{ '&nbsp;' }} {%- endfor %}
                  {% if states('sensor{}_cell_voltage_max_cell_number'.format(entity), rounded=True) == '{}'.format(num) %}
                  <font color='{{ max_color }}'>
                  {% elif states('sensor{}_cell_voltage_min_cell_number'.format(entity), rounded=True) == '{}'.format(num) %}
                  <font color='{{ min_color }}'>
                  {% else %} <font> {% endif %}
                  
                  {{ states('sensor{}_cell_voltage_{}{}'.format(entity, ''.zfill(lead_zero), num), rounded=True) }} V</font>
                  {% if has_value('sensor{}_cell_resistance_{}{}'.format(entity, ''.zfill(lead_zero), num)) %} / 
                  {{ states('sensor{}_cell_resistance_{}{}'.format(entity, ''.zfill(lead_zero), num) , rounded=True) }} Ω {% endif %}
                  <br>
                  
                  {% endmacro %}
                  
                  <center>
                  
                  {{ cell_v(lead_zero=1, num=9, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=0, num=10, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=0, num=11, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=0, num=12, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=0, num=13, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=0, num=14, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=0, num=15, entity='.yambms_jk_bms_2') }}
                  {{ cell_v(lead_zero=0, num=16, entity='.yambms_jk_bms_2') }}              
                  
                  </center>
          - type: entity-filter
            entities:
              - entity: switch.yambms_jk_bms_2_charge_switch
                name: Charge switch
              - entity: switch.yambms_jk_bms_2_discharge_switch
                name: Discharge switch
              - entity: switch.yambms_jk_bms_2_balance_switch
                name: Balance switch
              - entity: switch.yambms_jk_bms_2_enable_bluetooth_connection
                name: Bluetooth
              - entity: number.yambms_jk_bms_2_charging_cycles_offset
                name: Charging Cycles Offset
            conditions:
              - condition: state
                state_not: unavailable
      - type: grid
        column_span: 1
        cards:
          - type: heading
            heading: BMS 3
            heading_style: title
            badges:
              - type: entity
                show_state: true
                show_icon: true
                entity: binary_sensor.yambms_jk_bms_3_status_online
                color: state
                name: Online
                state_content: name
              - type: entity
                show_state: true
                show_icon: true
                entity: binary_sensor.yambms_jk_bms_3_can_be_combined
                color: state
                name: Combined
                state_content: name
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  <center>Time : <b><font color=red>{{
                  states('sensor.yambms_jk_bms_3_total_runtime_formatted', rounded=True)
                  | upper }}</font>
            layout_options:
              grid_columns: 2
              grid_rows: 1
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  <center>Error : <b><font color=red>{{
                  states('sensor.yambms_jk_bms_3_errors', rounded=True)}}</font>
            layout_options:
              grid_columns: 2
              grid_rows: 1
          - type: grid
            square: false
            columns: 3
            cards:
              - type: markdown
                content: >-
                  <center>Charge : <b>{% if
                  states('binary_sensor.yambms_jk_bms_3_status_charging', rounded=True) == 'on'
                  %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_3_status_charging', rounded=True) | upper
                  }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_3_status_charging', rounded=True) | upper
                  }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center>Discharge : <b> {% if
                  states('binary_sensor.yambms_jk_bms_3_status_discharging', rounded=True) ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_3_status_discharging', rounded=True) |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_3_status_discharging', rounded=True) |
                  upper }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center>Balance : <b> {% if
                  states('binary_sensor.yambms_jk_bms_3_status_balancing', rounded=True) ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_3_status_balancing', rounded=True) |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_3_status_balancing', rounded=True) |
                  upper }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_3_battery_voltage', rounded=True) }}
                  V</font></b>
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_3_battery_current', rounded=True) }} A</font></b>
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_3_battery_power', rounded=True) }} W</font>
          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                content: >-
                  <center><b><font size=4>SoC :&nbsp;&nbsp;<font
                  color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_3_battery_soc', rounded=True) }}
                  %</font></font>
              - type: markdown
                content: >-
                  <center><b><font size=4>SoH :&nbsp;&nbsp;<font
                  color=#41CD52 size=4>{{
                  states('sensor.yambms_jk_bms_3_battery_soh_valuation', rounded=True) }}
                  %</font></font>
              - type: markdown
                content: >-
                  <center> Battery Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('number.yambms_jk_bms_3_battery_capacity_total_setting', rounded=True)
                  }} Ah</font><br> Cycle Capacity :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_total_charging_cycle_capacity', rounded=True)
                  }} Ah</font><br> Ave. Cell Vol. :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_cell_average_voltage', rounded=True) }}
                  V</font><br> Balance Cur. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_balancing_current', rounded=True) }}
                  A</font><br> Max temp. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_max_temperature', rounded=True) }}
                  °C</font>
              - type: markdown
                content: >-
                  <center> Remain Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_battery_capacity_remaining', rounded=True) }}
                  Ah</font><br> Cycle Count :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_charging_cycles', rounded=True)
                  }}</font><br> Delta Cell Vol. :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_cell_delta_voltage', rounded=True) }}
                  V</font><br> MOS temp. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_temperature_powertube', rounded=True)
                  }} °C</font><br> Min temp. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_min_temperature', rounded=True) }}
                  °C</font>
          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                content: >-
                  
                  {% macro cell_v(num, entity, max_color = 'red' , min_color = '#3090C9', lead_zero = 0, spaces=3) -%}
                  {% if lead_zero %}0{% endif %}{{num}}.{% for spaces in range(0, spaces) -%} {{ '&nbsp;' }} {%- endfor %}
                  {% if states('sensor{}_cell_voltage_max_cell_number'.format(entity), rounded=True) == '{}'.format(num) %}
                  <font color='{{ max_color }}'>
                  {% elif states('sensor{}_cell_voltage_min_cell_number'.format(entity), rounded=True) == '{}'.format(num) %}
                  <font color='{{ min_color }}'>
                  {% else %} <font> {% endif %}
                  
                  {{ states('sensor{}_cell_voltage_{}{}'.format(entity, ''.zfill(lead_zero), num), rounded=True) }} V</font>
                  {% if has_value('sensor{}_cell_resistance_{}{}'.format(entity, ''.zfill(lead_zero), num)) %} / 
                  {{ states('sensor{}_cell_resistance_{}{}'.format(entity, ''.zfill(lead_zero), num) , rounded=True) }} Ω {% endif %}
                  <br>
                  
                  {% endmacro %}
                  
                  <center>
                  
                  {{ cell_v(lead_zero=1, num=1, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=1, num=2, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=1, num=3, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=1, num=4, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=1, num=5, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=1, num=6, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=1, num=7, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=1, num=8, entity='.yambms_jk_bms_3') }}                  
                  
                  </center>
              - type: markdown
                content: >-
                  
                  {% macro cell_v(num, entity, max_color = 'red' , min_color = '#3090C9', lead_zero = 0, spaces=3) -%}
                  {% if lead_zero %}0{% endif %}{{num}}.{% for spaces in range(0, spaces) -%} {{ '&nbsp;' }} {%- endfor %}
                  {% if states('sensor{}_cell_voltage_max_cell_number'.format(entity), rounded=True) == '{}'.format(num) %}
                  <font color='{{ max_color }}'>
                  {% elif states('sensor{}_cell_voltage_min_cell_number'.format(entity), rounded=True) == '{}'.format(num) %}
                  <font color='{{ min_color }}'>
                  {% else %} <font> {% endif %}
                  
                  {{ states('sensor{}_cell_voltage_{}{}'.format(entity, ''.zfill(lead_zero), num), rounded=True) }} V</font>
                  {% if has_value('sensor{}_cell_resistance_{}{}'.format(entity, ''.zfill(lead_zero), num)) %} / 
                  {{ states('sensor{}_cell_resistance_{}{}'.format(entity, ''.zfill(lead_zero), num) , rounded=True) }} Ω {% endif %}
                  <br>
                  
                  {% endmacro %}
                  
                  <center>
                  
                  {{ cell_v(lead_zero=1, num=9, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=0, num=10, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=0, num=11, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=0, num=12, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=0, num=13, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=0, num=14, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=0, num=15, entity='.yambms_jk_bms_3') }}
                  {{ cell_v(lead_zero=0, num=16, entity='.yambms_jk_bms_3') }}              
                  
                  </center>
          - type: entity-filter
            entities:
              - entity: switch.yambms_jk_bms_3_charge_switch
                name: Charge switch
              - entity: switch.yambms_jk_bms_3_discharge_switch
                name: Discharge switch
              - entity: switch.yambms_jk_bms_3_balance_switch
                name: Balance switch
              - entity: switch.yambms_jk_bms_3_enable_bluetooth_connection
                name: Bluetooth
              - entity: number.yambms_jk_bms_3_charging_cycles_offset
                name: Charging Cycles Offset
            conditions:
              - condition: state
                state_not: unavailable
  - title: Shunt
    type: sections
    max_columns: 3
    sections:
      - type: grid
        cards:
          - graph: line
            type: sensor
            entity: sensor.yambms_shunt_1_voltage
            detail: 2
            layout_options:
              grid_columns: 2
              grid_rows: 2
            name: Voltage
            hours_to_show: 8
          - graph: line
            type: sensor
            entity: sensor.yambms_shunt_1_state_of_charge
            detail: 2
            name: SoC
            hours_to_show: 8
          - type: gauge
            entity: sensor.yambms_shunt_1_current
            needle: true
            severity:
              green: 0
              yellow: -250
              red: -500
            max: 500
            min: -500
            name: Current
            layout_options:
              grid_columns: 2
              grid_rows: 3
          - type: gauge
            entity: sensor.yambms_shunt_1_power
            needle: true
            severity:
              green: 0
              yellow: -2500
              red: -5000
            max: 5000
            min: -5000
            name: Power
            layout_options:
              grid_columns: 2
              grid_rows: 3
          - type: entity-filter
            entities:
              - entity: sensor.yambms_shunt_1_voltage
                name: Shunt 1 Voltage
              - entity: sensor.yambms_shunt_1_current
                name: Shunt 1 Current
              - entity: sensor.yambms_shunt_1_power
                name: Shunt 1 Power
              - entity: sensor.yambms_shunt_1_state_of_charge
                name: Shunt 1 SoC
              - entity: sensor.yambms_shunt_1_temperature
                name: Shunt 1 Temperature
              - entity: sensor.yambms_shunt_1_charged_power
                name: Shunt 1 Charged Power
              - entity: sensor.yambms_shunt_1_discharged_power
                name: Shunt 1 Discharged Power
              - entity: sensor.yambms_shunt_1_battery_capacity
                name: Shunt 1 Battery Capacity
            conditions:
              - condition: state
                state_not: unavailable
          - type: entities
            entities:
              - entity: switch.yambms_shunt_1_combine_enabled
                name: Shunt 1 Combine enabled
              - entity: binary_sensor.yambms_shunt_1_can_be_combined
                name: Shunt 1 Can be combined
        title: Shunt 1
        column_span: 1
